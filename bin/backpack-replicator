#!/usr/bin/env node
(function() {
    var Replicator = require("../index"),
        redis      = require("redis"),
        Zk         = require("zkjs"),
        Queue      = require("zk-redis-queue"),
        args       = process.argv.slice(2),
        restarting = false,
        restart    = false,
        zk, queue, replicator, map;

    if (args.length < 2) {
        console.error("Usage: backpack-replicator <zk_servers> </zk/root>");
        process.exit(1);
    }

    zk = new Zk({hosts: args[0].split(","), root: args[1]});

    function zkRestart() {
        zk.start(function(error) {
            if (error) {
                setTimeout(zkRestart, 1000);
                return;
            }

            (function requestQueue() {
                if (restarting) {
                    restart = true;
                    return;
                }

                restarting = true;
                zk.get("/queue", function() {
                    // update queue info when it changes
                    requestQueue();
                }, function(error, queueInfo) {
                    queueInfo = JSON.parse(queueInfo);

                    queue = (function makeQueue() {
                        var redises, queue;

                        redises = queueInfo.servers.map(function(config) {
                            return redis.createClient(config.port, config.host, {retry_max_delay: 1000});
                        });

                        queue = new Queue(redises, new Zk({hosts: args[0].split(","), root: args[1]}), args[3]);
                        queue.on("error", console.error.bind(console));
                        queue.on("ready", function() {
                            console.log("Queue #" + queue.id + " is ready!");
                        });

                        return queue;
                    })();

                    if (!replicator) {
                        if (map) {
                            startReplicator();
                        }

                        restarting = false;
                    } else {
                        console.log("Stopping replicator");
                        replicator.once("stopped", function() {
                            replicator.queue.close();

                            replicator.setQueue(queue);
                            replicator.start();
                            console.log("Replicator restarted with new queue #" + queue.id);

                            replicator.once("started", function() {
                                restarting = false;

                                if (restart) {
                                    restart = false;
                                    requestQueue();
                                }
                            });
                        });

                        replicator.stop();
                    }
                });
            })();

            (function requestMap() {
                zk.get("/servers-map", function() {
                    // update map when it changes
                    requestMap();
                }, function(error, map) {
                    if (error) {
                        if (error == zk.errors.NONODE) {
                            throw new Error("Map node not found in zk!");
                        } else {
                            throw error;
                        }
                    }

                    map = JSON.parse(map);

                    if (!replicator) {
                        if (queue) {
                            startReplicator();
                        }
                    } else {
                        replicator.setMap(map);
                        console.log("Replicator map updated!");
                    }
                });
            })();
        });
    }

    function startReplicator() {
        replicator = new Replicator(queue, map);
        replicator.on("error", console.error.bind(console));
        replicator.on("ready", console.log.bind(console, "Replicator is ready!"));
        replicator.on("started", console.log.bind(console, "Replicator started!"));

        replicator.start();
        console.log("Replicator started!");
    }

    zk.on("expired", zkRestart);

    zkRestart();
})();
